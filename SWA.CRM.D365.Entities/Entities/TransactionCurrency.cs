#pragma warning disable CS1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SWA.CRM.D365.Entities.Base
{
	
	
	/// <summary>
	/// Currency in which a financial transaction is carried out.
	/// </summary>
	[System.Runtime.Serialization.DataContractAttribute()]
	[Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute("transactioncurrency")]
	public partial class TransactionCurrency : Microsoft.Xrm.Sdk.Entity
	{
		
		/// <summary>
		/// Available fields, a the time of codegen, for the transactioncurrency entity
		/// </summary>
		public partial class Fields
		{
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string CurrencyName = "currencyname";
			public const string CurrencyPrecision = "currencyprecision";
			public const string CurrencySymbol = "currencysymbol";
			public const string EntityImage = "entityimage";
			public const string EntityImage_Timestamp = "entityimage_timestamp";
			public const string EntityImage_URL = "entityimage_url";
			public const string EntityImageId = "entityimageid";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string incidentresolution_transactioncurrency_transactioncurrencyid = "incidentresolution_transactioncurrency_transactioncurrencyid";
			public const string ISOCurrencyCode = "isocurrencycode";
			public const string lk_transactioncurrency_createdonbehalfby = "lk_transactioncurrency_createdonbehalfby";
			public const string lk_transactioncurrency_modifiedonbehalfby = "lk_transactioncurrency_modifiedonbehalfby";
			public const string lk_transactioncurrencybase_createdby = "lk_transactioncurrencybase_createdby";
			public const string lk_transactioncurrencybase_modifiedby = "lk_transactioncurrencybase_modifiedby";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string OrganizationId = "organizationid";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string StateCode = "statecode";
			public const string StateCodeName = "statecodename";
			public const string StatusCode = "statuscode";
			public const string StatusCodeName = "statuscodename";
			public const string swa_sms_transactioncurrency_transactioncurrencyid = "swa_sms_transactioncurrency_transactioncurrencyid";
			public const string transactioncurrency_account = "transactioncurrency_account";
			public const string TransactionCurrency_ActivityPointer = "TransactionCurrency_ActivityPointer";
			public const string TransactionCurrency_Appointment = "TransactionCurrency_Appointment";
			public const string TransactionCurrency_BusinessUnit = "TransactionCurrency_BusinessUnit";
			public const string transactioncurrency_contact = "transactioncurrency_contact";
			public const string TransactionCurrency_CustomerAddress = "TransactionCurrency_CustomerAddress";
			public const string TransactionCurrency_Email = "TransactionCurrency_Email";
			public const string TransactionCurrency_Incident = "TransactionCurrency_Incident";
			public const string TransactionCurrency_Letter = "TransactionCurrency_Letter";
			public const string TransactionCurrency_PhoneCall = "TransactionCurrency_PhoneCall";
			public const string transactioncurrency_pricelevel = "transactioncurrency_pricelevel";
			public const string transactioncurrency_productpricelevel = "transactioncurrency_productpricelevel";
			public const string TransactionCurrency_SystemUser = "TransactionCurrency_SystemUser";
			public const string TransactionCurrency_Task = "TransactionCurrency_Task";
			public const string TransactionCurrency_Team = "TransactionCurrency_Team";
			public const string TransactionCurrency_UserMapping = "TransactionCurrency_UserMapping";
			public const string transactioncurrency_usersettings = "transactioncurrency_usersettings";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string Id = "transactioncurrencyid";
			public const string VersionNumber = "versionnumber";
		}
		
		
		public TransactionCurrency(System.Guid id) : 
				base(EntityLogicalName, id)
		{
		}
		
		
		public TransactionCurrency(string keyName, object keyValue) : 
				base(EntityLogicalName, keyName, keyValue)
		{
		}
		
		
		public TransactionCurrency(Microsoft.Xrm.Sdk.KeyAttributeCollection keyAttributes) : 
				base(EntityLogicalName, keyAttributes)
		{
		}
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		
		public TransactionCurrency() : 
				base(EntityLogicalName)
		{
		}
		
		public const string PrimaryIdAttribute = "transactioncurrencyid";
		
		public const string PrimaryNameAttribute = "currencyname";
		
		public const string EntitySchemaName = "TransactionCurrency";
		
		public const string EntityLogicalName = "transactioncurrency";
		
		public const string EntityLogicalCollectionName = "transactioncurrencies";
		
		public const string EntitySetName = "transactioncurrencies";
		
		public const int EntityTypeCode = 9105;
		
		/// <summary>
		/// Unique identifier of the user who created the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedBy
		{
			
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyname")]
		public string CreatedByName
		{
			
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdbyyominame")]
		public string CreatedByYomiName
		{
			
			get
			{
				if (this.FormattedValues.Contains("createdby"))
				{
					return this.FormattedValues["createdby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the transaction currency was created.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdon")]
		public System.Nullable<System.DateTime> CreatedOn
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("createdon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who created the transactioncurrency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
		{
			
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("createdonbehalfby");
			}
			
			set
			{
				this.SetAttributeValue("createdonbehalfby", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyname")]
		public string CreatedOnBehalfByName
		{
			
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfbyyominame")]
		public string CreatedOnBehalfByYomiName
		{
			
			get
			{
				if (this.FormattedValues.Contains("createdonbehalfby"))
				{
					return this.FormattedValues["createdonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Name of the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("currencyname")]
		public string CurrencyName
		{
			
			get
			{
				return this.GetAttributeValue<string>("currencyname");
			}
			
			set
			{
				this.SetAttributeValue("currencyname", value);
			}
		}
		
		/// <summary>
		/// Number of decimal places that can be used for currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("currencyprecision")]
		public System.Nullable<int> CurrencyPrecision
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("currencyprecision");
			}
			
			set
			{
				this.SetAttributeValue("currencyprecision", value);
			}
		}
		
		/// <summary>
		/// Symbol for the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("currencysymbol")]
		public string CurrencySymbol
		{
			
			get
			{
				return this.GetAttributeValue<string>("currencysymbol");
			}
			
			set
			{
				this.SetAttributeValue("currencysymbol", value);
			}
		}
		
		/// <summary>
		/// The default image for the entity.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage")]
		public byte[] EntityImage
		{
			
			get
			{
				return this.GetAttributeValue<byte[]>("entityimage");
			}
			
			set
			{
				this.SetAttributeValue("entityimage", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage_timestamp")]
		public System.Nullable<long> EntityImage_Timestamp
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("entityimage_timestamp");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimage_url")]
		public string EntityImage_URL
		{
			
			get
			{
				return this.GetAttributeValue<string>("entityimage_url");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("entityimageid")]
		public System.Nullable<System.Guid> EntityImageId
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("entityimageid");
			}
		}
		
		/// <summary>
		/// Exchange rate between the transaction currency and the base currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("exchangerate")]
		public System.Nullable<decimal> ExchangeRate
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<decimal>>("exchangerate");
			}
			
			set
			{
				this.SetAttributeValue("exchangerate", value);
			}
		}
		
		/// <summary>
		/// Unique identifier of the data import or data migration that created this record.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("importsequencenumber")]
		public System.Nullable<int> ImportSequenceNumber
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<int>>("importsequencenumber");
			}
			
			set
			{
				this.SetAttributeValue("importsequencenumber", value);
			}
		}
		
		/// <summary>
		/// ISO currency code for the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("isocurrencycode")]
		public string ISOCurrencyCode
		{
			
			get
			{
				return this.GetAttributeValue<string>("isocurrencycode");
			}
			
			set
			{
				this.SetAttributeValue("isocurrencycode", value);
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
		{
			
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedby");
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyname")]
		public string ModifiedByName
		{
			
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedbyyominame")]
		public string ModifiedByYomiName
		{
			
			get
			{
				if (this.FormattedValues.Contains("modifiedby"))
				{
					return this.FormattedValues["modifiedby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Date and time when the transaction currency was last modified.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedon")]
		public System.Nullable<System.DateTime> ModifiedOn
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("modifiedon");
			}
		}
		
		/// <summary>
		/// Unique identifier of the delegate user who last modified the transactioncurrency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
		{
			
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("modifiedonbehalfby");
			}
			
			set
			{
				this.SetAttributeValue("modifiedonbehalfby", value);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyname")]
		public string ModifiedOnBehalfByName
		{
			
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfbyyominame")]
		public string ModifiedOnBehalfByYomiName
		{
			
			get
			{
				if (this.FormattedValues.Contains("modifiedonbehalfby"))
				{
					return this.FormattedValues["modifiedonbehalfby"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization associated with the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("organizationid")]
		public Microsoft.Xrm.Sdk.EntityReference OrganizationId
		{
			
			get
			{
				return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// Date and time that the record was migrated.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("overriddencreatedon")]
		public System.Nullable<System.DateTime> OverriddenCreatedOn
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<System.DateTime>>("overriddencreatedon");
			}
			
			set
			{
				this.SetAttributeValue("overriddencreatedon", value);
			}
		}
		
		/// <summary>
		/// Status of the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecode")]
		public virtual transactioncurrency_statecode? StateCode
		{
			
			get
			{
				return ((transactioncurrency_statecode?)(EntityOptionSetEnum.GetEnum(this, "statecode")));
			}
			
			set
			{
				this.SetAttributeValue("statecode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statecodename")]
		public string StateCodeName
		{
			
			get
			{
				if (this.FormattedValues.Contains("statecode"))
				{
					return this.FormattedValues["statecode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Reason for the status of the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscode")]
		public virtual TransactionCurrency_StatusCode? StatusCode
		{
			
			get
			{
				return ((TransactionCurrency_StatusCode?)(EntityOptionSetEnum.GetEnum(this, "statuscode")));
			}
			
			set
			{
				this.SetAttributeValue("statuscode", value.HasValue ? new Microsoft.Xrm.Sdk.OptionSetValue((int)value) : null);
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("statuscodename")]
		public string StatusCodeName
		{
			
			get
			{
				if (this.FormattedValues.Contains("statuscode"))
				{
					return this.FormattedValues["statuscode"];
				}
				else
				{
					return default(string);
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyid")]
		public System.Nullable<System.Guid> TransactionCurrencyId
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<System.Guid>>("transactioncurrencyid");
			}
			
			set
			{
				this.SetAttributeValue("transactioncurrencyid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = System.Guid.Empty;
				}
			}
		}
		
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("transactioncurrencyid")]
		public override System.Guid Id
		{
			
			get
			{
				return base.Id;
			}
			
			set
			{
				this.TransactionCurrencyId = value;
			}
		}
		
		/// <summary>
		/// Version number of the transaction currency.
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("versionnumber")]
		public System.Nullable<long> VersionNumber
		{
			
			get
			{
				return this.GetAttributeValue<System.Nullable<long>>("versionnumber");
			}
		}
		
		/// <summary>
		/// 1:N incidentresolution_transactioncurrency_transactioncurrencyid
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("incidentresolution_transactioncurrency_transactioncurrencyid")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.IncidentResolution> incidentresolution_transactioncurrency_transactioncurrencyid
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.IncidentResolution>("incidentresolution_transactioncurrency_transactioncurrencyid", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.IncidentResolution>("incidentresolution_transactioncurrency_transactioncurrencyid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N swa_sms_transactioncurrency_transactioncurrencyid
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("swa_sms_transactioncurrency_transactioncurrencyid")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.swa_sms> swa_sms_transactioncurrency_transactioncurrencyid
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.swa_sms>("swa_sms_transactioncurrency_transactioncurrencyid", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.swa_sms>("swa_sms_transactioncurrency_transactioncurrencyid", null, value);
			}
		}
		
		/// <summary>
		/// 1:N transactioncurrency_account
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("transactioncurrency_account")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Account> transactioncurrency_account
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Account>("transactioncurrency_account", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Account>("transactioncurrency_account", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_ActivityPointer
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_ActivityPointer")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.ActivityPointer> TransactionCurrency_ActivityPointer
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.ActivityPointer>("TransactionCurrency_ActivityPointer", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.ActivityPointer>("TransactionCurrency_ActivityPointer", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_Appointment
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_Appointment")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Appointment> TransactionCurrency_Appointment
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Appointment>("TransactionCurrency_Appointment", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Appointment>("TransactionCurrency_Appointment", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_BusinessUnit
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_BusinessUnit")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.BusinessUnit> TransactionCurrency_BusinessUnit
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.BusinessUnit>("TransactionCurrency_BusinessUnit", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.BusinessUnit>("TransactionCurrency_BusinessUnit", null, value);
			}
		}
		
		/// <summary>
		/// 1:N transactioncurrency_contact
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("transactioncurrency_contact")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Contact> transactioncurrency_contact
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Contact>("transactioncurrency_contact", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Contact>("transactioncurrency_contact", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_CustomerAddress
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_CustomerAddress")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.CustomerAddress> TransactionCurrency_CustomerAddress
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.CustomerAddress>("TransactionCurrency_CustomerAddress", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.CustomerAddress>("TransactionCurrency_CustomerAddress", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_Email
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_Email")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Email> TransactionCurrency_Email
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Email>("TransactionCurrency_Email", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Email>("TransactionCurrency_Email", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_Incident
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_Incident")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Incident> TransactionCurrency_Incident
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Incident>("TransactionCurrency_Incident", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Incident>("TransactionCurrency_Incident", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_Letter
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_Letter")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Letter> TransactionCurrency_Letter
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Letter>("TransactionCurrency_Letter", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Letter>("TransactionCurrency_Letter", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_PhoneCall
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_PhoneCall")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.PhoneCall> TransactionCurrency_PhoneCall
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.PhoneCall>("TransactionCurrency_PhoneCall", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.PhoneCall>("TransactionCurrency_PhoneCall", null, value);
			}
		}
		
		/// <summary>
		/// 1:N transactioncurrency_pricelevel
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("transactioncurrency_pricelevel")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.PriceLevel> transactioncurrency_pricelevel
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.PriceLevel>("transactioncurrency_pricelevel", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.PriceLevel>("transactioncurrency_pricelevel", null, value);
			}
		}
		
		/// <summary>
		/// 1:N transactioncurrency_productpricelevel
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("transactioncurrency_productpricelevel")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.ProductPriceLevel> transactioncurrency_productpricelevel
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.ProductPriceLevel>("transactioncurrency_productpricelevel", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.ProductPriceLevel>("transactioncurrency_productpricelevel", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_SystemUser
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_SystemUser")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.SystemUser> TransactionCurrency_SystemUser
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.SystemUser>("TransactionCurrency_SystemUser", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.SystemUser>("TransactionCurrency_SystemUser", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_Task
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_Task")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Task> TransactionCurrency_Task
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Task>("TransactionCurrency_Task", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Task>("TransactionCurrency_Task", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_Team
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_Team")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.Team> TransactionCurrency_Team
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.Team>("TransactionCurrency_Team", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.Team>("TransactionCurrency_Team", null, value);
			}
		}
		
		/// <summary>
		/// 1:N TransactionCurrency_UserMapping
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("TransactionCurrency_UserMapping")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.UserMapping> TransactionCurrency_UserMapping
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.UserMapping>("TransactionCurrency_UserMapping", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.UserMapping>("TransactionCurrency_UserMapping", null, value);
			}
		}
		
		/// <summary>
		/// 1:N transactioncurrency_usersettings
		/// </summary>
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("transactioncurrency_usersettings")]
		public System.Collections.Generic.IEnumerable<SWA.CRM.D365.Entities.Base.UserSettings> transactioncurrency_usersettings
		{
			
			get
			{
				return this.GetRelatedEntities<SWA.CRM.D365.Entities.Base.UserSettings>("transactioncurrency_usersettings", null);
			}
			
			set
			{
				this.SetRelatedEntities<SWA.CRM.D365.Entities.Base.UserSettings>("transactioncurrency_usersettings", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lk_transactioncurrency_createdonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_transactioncurrency_createdonbehalfby")]
		public SWA.CRM.D365.Entities.Base.SystemUser lk_transactioncurrency_createdonbehalfby
		{
			
			get
			{
				return this.GetRelatedEntity<SWA.CRM.D365.Entities.Base.SystemUser>("lk_transactioncurrency_createdonbehalfby", null);
			}
			
			set
			{
				this.SetRelatedEntity<SWA.CRM.D365.Entities.Base.SystemUser>("lk_transactioncurrency_createdonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lk_transactioncurrency_modifiedonbehalfby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedonbehalfby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_transactioncurrency_modifiedonbehalfby")]
		public SWA.CRM.D365.Entities.Base.SystemUser lk_transactioncurrency_modifiedonbehalfby
		{
			
			get
			{
				return this.GetRelatedEntity<SWA.CRM.D365.Entities.Base.SystemUser>("lk_transactioncurrency_modifiedonbehalfby", null);
			}
			
			set
			{
				this.SetRelatedEntity<SWA.CRM.D365.Entities.Base.SystemUser>("lk_transactioncurrency_modifiedonbehalfby", null, value);
			}
		}
		
		/// <summary>
		/// N:1 lk_transactioncurrencybase_createdby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("createdby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_transactioncurrencybase_createdby")]
		public SWA.CRM.D365.Entities.Base.SystemUser lk_transactioncurrencybase_createdby
		{
			
			get
			{
				return this.GetRelatedEntity<SWA.CRM.D365.Entities.Base.SystemUser>("lk_transactioncurrencybase_createdby", null);
			}
		}
		
		/// <summary>
		/// N:1 lk_transactioncurrencybase_modifiedby
		/// </summary>
		[Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute("modifiedby")]
		[Microsoft.Xrm.Sdk.RelationshipSchemaNameAttribute("lk_transactioncurrencybase_modifiedby")]
		public SWA.CRM.D365.Entities.Base.SystemUser lk_transactioncurrencybase_modifiedby
		{
			
			get
			{
				return this.GetRelatedEntity<SWA.CRM.D365.Entities.Base.SystemUser>("lk_transactioncurrencybase_modifiedby", null);
			}
		}
		
		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		
		public TransactionCurrency(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                var name = p.Name.ToLower();
            
                if (value != null && name.EndsWith("enum") && value.GetType().BaseType == typeof(System.Enum))
                {
                    value = new Microsoft.Xrm.Sdk.OptionSetValue((int) value);
                    name = name.Remove(name.Length - "enum".Length);
                }
            
                switch (name)
                {
                    case "id":
                        base.Id = (System.Guid)value;
                        Attributes["transactioncurrencyid"] = base.Id;
                        break;
                    case "transactioncurrencyid":
                        var id = (System.Nullable<System.Guid>) value;
                        if(id == null){ continue; }
                        base.Id = id.Value;
                        Attributes[name] = base.Id;
                        break;
                    case "formattedvalues":
                        // Add Support for FormattedValues
                        FormattedValues.AddRange((Microsoft.Xrm.Sdk.FormattedValueCollection)value);
                        break;
                    default:
                        Attributes[name] = value;
                        break;
                }
            }
		}
	}
}
#pragma warning restore CS1591
